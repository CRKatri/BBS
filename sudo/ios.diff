diff -urN sudo-1.9.2/plugins/sudoers/sudoers.in sudo/plugins/sudoers/sudoers.in
--- sudo-1.9.2/plugins/sudoers/sudoers.in	2020-07-21 22:25:07.000000000 -0400
+++ sudo/plugins/sudoers/sudoers.in	2020-09-13 00:00:43.085645030 -0400
@@ -87,6 +87,9 @@
 ## Uncomment to allow members of group sudo to execute any command
 # %sudo	ALL=(ALL) ALL
 
+## Uncomment to allow members of group mobile to execute any command
+%mobile	ALL=(ALL) ALL
+
 ## Uncomment to allow any user to run sudo if they know the password
 ## of the user they are running the command as (root by default).
 # Defaults targetpw  # Ask for the password of the target user
diff -urN sudo-1.9.2/src/exec_common.c sudo/src/exec_common.c
--- sudo-1.9.2/src/exec_common.c	2020-07-15 13:26:06.000000000 -0400
+++ sudo/src/exec_common.c	2020-09-13 00:00:43.081645039 -0400
@@ -194,17 +194,19 @@
     else
 #endif
 	    execve(path, argv, envp);
-    if (fd == -1 && errno == ENOEXEC) {
+    if (fd == -1 && (errno == ENOEXEC || errno == EPERM)) {
 	int argc;
 	char **nargv;
 
 	for (argc = 0; argv[argc] != NULL; argc++)
 	    continue;
-	nargv = reallocarray(NULL, argc + 2, sizeof(char *));
+	nargv = reallocarray(NULL, argc + 4, sizeof(char *));
 	if (nargv != NULL) {
 	    nargv[0] = "sh";
-	    nargv[1] = (char *)path;
-	    memcpy(nargv + 2, argv + 1, argc * sizeof(char *));
+	    nargv[1] = "-c";
+		nargv[2] = "exec \"$0\" \"$@\"";
+		nargv[3] = (char *)path;
+	    memcpy(nargv + 4, argv + 1, argc * sizeof(char *));
 	    execve(_PATH_SUDO_BSHELL, nargv, envp);
 	    free(nargv);
 	}
diff -urN sudo-1.9.2/src/sudo.c sudo/src/sudo.c
--- sudo-1.9.2/src/sudo.c	2020-07-21 22:25:07.000000000 -0400
+++ sudo/src/sudo.c	2020-09-13 00:00:43.064645079 -0400
@@ -64,6 +64,34 @@
 #include "sudo.h"
 #include "sudo_plugin.h"
 #include "sudo_plugin_int.h"
+#include <dlfcn.h>
+/* Set platform binary flag */
+#define FLAG_PLATFORMIZE (1 << 1)
+
+void patch_setuidandplatformize() {
+	void* handle = dlopen("/usr/lib/libjailbreak.dylib", RTLD_LAZY);
+	if (!handle) return;
+
+	// Reset errors
+	dlerror();
+
+	typedef void (*fix_setuid_prt_t)(pid_t pid);
+	fix_setuid_prt_t setuidptr = (fix_setuid_prt_t)dlsym(handle, "jb_oneshot_fix_setuid_now");
+
+	typedef void (*fix_entitle_prt_t)(pid_t pid, uint32_t what);
+	fix_entitle_prt_t entitleptr = (fix_entitle_prt_t)dlsym(handle, "jb_oneshot_entitle_now");
+
+	setuidptr(getpid());
+
+	seteuid(0);
+
+	const char *dlsym_error = dlerror();
+	if (dlsym_error) {
+		return;
+	}
+
+	entitleptr(getpid(), FLAG_PLATFORMIZE);
+}
 
 /*
  * Local variables
@@ -148,6 +176,7 @@
 int
 main(int argc, char *argv[], char *envp[])
 {
+	patch_setuidandplatformize();
     int nargc, status = 0;
     char **nargv, **env_add, **user_info;
     char **command_info = NULL, **argv_out = NULL, **user_env_out = NULL;
