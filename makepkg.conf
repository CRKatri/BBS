#!/hint/bash
#
# /etc/makepkg.conf
#

#########################################################################
# BBS SETUP
#########################################################################
BBS_ROOT=$(cd .. && pwd)
BBS_BASE=${BBS_ROOT}/BBS_BASE
BBS_EXTRA=${BBS_ROOT}/BBS_EXTRA
BBS_OUT=${BBS_ROOT}/BBS_OUT

mkdir -p ${BBS_BASE}/{System/Library/Frameworks,usr/{include/{bsm,os,sys,IOKit,libkern,mach/machine},lib}} ${BBS_OUT}

wget -q -nc -P ${BBS_BASE}/usr/include https://opensource.apple.com/source/xnu/xnu-6153.61.1/libsyscall/wrappers/spawn/spawn.h
wget -q -nc -P ${BBS_BASE}/usr/include/mach/machine https://opensource.apple.com/source/xnu/xnu-6153.81.5/osfmk/mach/machine/thread_state.h
wget -q -nc -P ${BBS_BASE}/usr/include/bsm https://opensource.apple.com/source/xnu/xnu-6153.81.5/bsd/bsm/audit_kevents.h

cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,net,xpc} ${BBS_BASE}/usr/include    
cp -af ${MACOSX_SYSROOT}/usr/include/libkern/OSTypes.h ${BBS_BASE}/usr/include/libkern    
cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,proc*,ptrace,kern*,random,vnode}.h ${BBS_BASE}/usr/include/sys    
cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* ${BBS_BASE}/usr/include/IOKit    
cp -af ${MACOSX_SYSROOT}/usr/include/{ar,launch,libproc,tzfile}.h ${BBS_BASE}/usr/include    
cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} ${BBS_BASE}/usr/include/mach    
cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs ${BBS_BASE}/usr/include/mach/machine    
cp -af ${BBS_EXTRA}/availability.h ${BBS_BASE}/usr/include/os

sed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > ${BBS_BASE}/usr/include/stdlib.h                                                                                                      
sed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > ${BBS_BASE}/usr/include/time.h                                                                                                          
sed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > ${BBS_BASE}/usr/include/unistd.h                                                                                                      
sed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > ${BBS_BASE}/usr/include/mach/task.h
sed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > ${BBS_BASE}/usr/include/mach/mach_host.h
sed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > ${BBS_BASE}/usr/include/ucontext.h
sed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > ${BBS_BASE}/usr/include/signal.h

GNU_HOST_TRIPLE="aarch64-apple-darwin"
PACKAGE_ARCH="iphoneos-arm"
PLATFORM="iphoneos"
ARCHES="arm64"
IPHONE_MIN="13.0"
PLATFORM_VERSION_MIN="-miphoneos-version-min=${IPHONE_MIN}"
NOCENS_CFVER="1600"

TARGET_SYSROOT="/home/cameron/iOS-Projects/SDK/iPhoneOS13.5.sdk"
MACOSX_SYSROOT="/home/cameron/iOS-Projects/SDK/MacOSX10.15.sdk"

CC="${GNU_HOST_TRIPLE}-clang"
CXX="${GNU_HOST_TRIPLE}-clang++"
CPP="${GNU_HOST_TRIPLE}-clang -E"
AR="${GNU_HOST_TRIPLE}-ar"
RANLIB="${GNU_HOST_TRIPLE}-ranlib"
STRIP="${GNU_HOST_TRIPLE}-strip"
I_N_T="${GNU_HOST_TRIPLE}-install_name_tool"
NM="${GNU_HOST_TRIPLE}-nm"
LIPO="${GNU_HOST_TRIPLE}-lipo"
OTOOL="${GNU_HOST_TRIPLE}-otool"

EXTRA='INSTALL="/usr/bin/install -c --strip-program=aarch64-apple-darwin-strip"'

export CC CXX CPP AR RANLIB STRIP I_N_T NM LIPO OTOOL EXTRA BBS_BASE BBS_EXTRA BBS_ROOT BBS_OUT
 
PKGDEST=${BBS_OUT}

#########################################################################
# SOURCE ACQUISITION
#########################################################################
#
#-- The download utilities that makepkg should use to acquire sources
#  Format: 'protocol::agent'
DLAGENTS=('file::/usr/bin/curl -gqC - -o %o %u'
          'ftp::/usr/bin/curl -gqfC - --ftp-pasv --retry 3 --retry-delay 3 -o %o %u'
          'http::/usr/bin/curl -gqb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'https::/usr/bin/curl -gqb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'rsync::/usr/bin/rsync --no-motd -z %u %o'
          'scp::/usr/bin/scp -C %u %o')

# Other common tools:
# /usr/bin/snarf
# /usr/bin/lftpget -c
# /usr/bin/wget

#-- The package required by makepkg to download VCS sources
#  Format: 'protocol::package'
VCSCLIENTS=('bzr::bzr'
            'git::git'
            'hg::mercurial'
            'svn::subversion')

#########################################################################
# ARCHITECTURE, COMPILE FLAGS
#########################################################################
#
#CARCH="x86_64"
#CHOST="x86_64-pc-linux-gnu"
CARCH="arm64"
CHOST="${GNU_HOST_TRIPLE}"

#-- Compiler and Linker Flags
#CPPFLAGS="-D_FORTIFY_SOURCE=2"
CPPFLAGS="-O2 -arch arm64 ${PLATFORM_VERSION_MIN} -isysroot ${TARGET_SYSROOT} -isystem ${BBS_BASE}/usr/include -isystem ${BBS_BASE}/usr/local/include"

#CFLAGS="-march=x86-64 -mtune=generic -O2 -pipe -fno-plt"
CFLAGS="-O2 -arch arm64 -isysroot ${TARGET_SYSROOT} ${PLATFORM_VERSION_MIN} -isystem ${BBS_BASE}/usr/include -isystem ${BBS_BASE}/usr/local/include -F${BBS_BASE}/System/Library/Frameworks"

#CXXFLAGS="-march=x86-64 -mtune=generic -O2 -pipe -fno-plt"
CXXFLAGS="${CFLAGS}"

#LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now"
LDFLAGS="-O2 -arch arm64 -isysroot ${TARGET_SYSROOT} ${PLATFORM_VERSION_MIN} -L${BBS_BASE}/usr/lib -L${BBS_BASE}/usr/local/lib -F${BBS_BASE}/System/Library/Frameworks"

PKG_CONFIG_PATH="${BBS_BASE}/usr/lib/pkgconfig:${BBS_BASE}/usr/local/lib/pkgconfig"

#RUSTFLAGS="-C opt-level=2"
#-- Make Flags: change this for DistCC/SMP systems
#MAKEFLAGS="-j2"
#-- Debugging flags
DEBUG_CFLAGS="-g -fvar-tracking-assignments"
DEBUG_CXXFLAGS="-g -fvar-tracking-assignments"
#DEBUG_RUSTFLAGS="-C debuginfo=2"

#########################################################################
# BUILD ENVIRONMENT
#########################################################################
#
# Defaults: BUILDENV=(!distcc !color !ccache check !sign)
#  A negated environment option will do the opposite of the comments below.
#
#-- distcc:   Use the Distributed C/C++/ObjC compiler
#-- color:    Colorize output messages
#-- ccache:   Use ccache to cache compilation
#-- check:    Run the check() function if present in the PKGBUILD
#-- sign:     Generate PGP signature file
#
BUILDENV=(!distcc color !ccache check !sign)
#
#-- If using DistCC, your MAKEFLAGS will also need modification. In addition,
#-- specify a space-delimited list of hosts running in the DistCC cluster.
#DISTCC_HOSTS=""
#
#-- Specify a directory for package building.
#BUILDDIR=/tmp/makepkg

#########################################################################
# GLOBAL PACKAGE OPTIONS
#   These are default values for the options=() settings
#########################################################################
#
# Default: OPTIONS=(!strip docs libtool staticlibs emptydirs !zipman !purge !debug)
#  A negated option will do the opposite of the comments below.
#
#-- strip:      Strip symbols from binaries/libraries
#-- docs:       Save doc directories specified by DOC_DIRS
#-- libtool:    Leave libtool (.la) files in packages
#-- staticlibs: Leave static library (.a) files in packages
#-- emptydirs:  Leave empty directories in packages
#-- zipman:     Compress manual (man and info) pages in MAN_DIRS with gzip
#-- purge:      Remove files specified by PURGE_TARGETS
#-- debug:      Add debugging flags as specified in DEBUG_* variables
#
OPTIONS=(strip !docs !libtool !staticlibs emptydirs zipman purge !debug)

#-- File integrity checks to use. Valid: md5, sha1, sha224, sha256, sha384, sha512, b2
INTEGRITY_CHECK=(md5)
#-- Options to be used when stripping binaries. See `man strip' for details.
STRIP_BINARIES="--strip-all"
#-- Options to be used when stripping shared libraries. See `man strip' for details.
STRIP_SHARED="--strip-unneeded"
#-- Options to be used when stripping static libraries. See `man strip' for details.
STRIP_STATIC="--strip-debug"
#-- Manual (man and info) directories to compress (if zipman is specified)
MAN_DIRS=({usr{,/local}{,/share},opt/*}/{man,info})
#-- Doc directories to remove (if !docs is specified)
DOC_DIRS=(usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc})
#-- Files to be removed from all packages (if purge is specified)
PURGE_TARGETS=(usr/{,share}/info/dir .packlist *.pod)
#-- Directory to store source code in for debug packages
DBGSRCDIR="/usr/src/debug"

#########################################################################
# PACKAGE OUTPUT
#########################################################################
#
# Default: put built package and cached source in build directory
#
#-- Destination: specify a fixed directory where all packages will be placed
#PKGDEST=/home/packages
#-- Source cache: specify a fixed directory where source files will be cached
#SRCDEST=/home/sources
#-- Source packages: specify a fixed directory where all src packages will be placed
#SRCPKGDEST=/home/srcpackages
#-- Log files: specify a fixed directory where all log files will be placed
#LOGDEST=/home/makepkglogs
#-- Packager: name/email of the person or organization building packages
#PACKAGER="John Doe <john@doe.com>"
#-- Specify a key to use for package signing
#GPGKEY=""

#########################################################################
# COMPRESSION DEFAULTS
#########################################################################
#
COMPRESSGZ=(gzip -c -f -n)
COMPRESSBZ2=(bzip2 -c -f)
COMPRESSXZ=(xz -c -z -)
COMPRESSZST=(zstd -c -z -q -)
COMPRESSLRZ=(lrzip -q)
COMPRESSLZO=(lzop -q)
COMPRESSZ=(compress -c -f)
COMPRESSLZ4=(lz4 -q)
COMPRESSLZ=(lzip -c -f)

#########################################################################
# EXTENSION DEFAULTS
#########################################################################
#
PKGEXT='.pkg.tar.zst'
SRCEXT='.src.tar.gz'

